{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.array.push.js\";\nexport default {\n  data: function data() {\n    return {\n      post: {}\n    };\n  },\n  mounted: function mounted() {\n    // Fetch the data for the individual post using the route parameter\n    var postId = this.$route.params.id;\n    this.fetchPost(postId);\n  },\n  methods: {\n    fetchPost: function fetchPost(postId) {\n      var _this = this;\n      // Fetch the data for the individual post\n      fetch(\"http://localhost:3000/post/get/\".concat(postId)).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        _this.post = data; // Directly assign the response data\n      })[\"catch\"](function (error) {\n        console.error(\"Error fetching individual post:\", error);\n      });\n    },\n    updatePost: function updatePost() {\n      var _this2 = this;\n      // Get the updated body directly from the textarea\n      var updatedBody = document.querySelector(\".post-body textarea\").value;\n\n      // Send a request to update the post's body on the server\n      fetch(\"http://localhost:3000/post/update/\".concat(this.post.id), {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          body: updatedBody\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        console.log(\"Post updated:\", data);\n\n        // After updating, navigate back to the home page\n        _this2.$router.push(\"/\");\n      })[\"catch\"](function (error) {\n        console.error(\"Error updating post:\", error);\n      });\n    },\n    deletePost: function deletePost() {\n      var _this3 = this;\n      var postId = this.post.id;\n\n      // Send a request to delete the post on the server\n      fetch(\"http://localhost:3000/post/delete/\".concat(postId), {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        if (response.ok) {\n          console.log(\"Post deleted successfully\");\n          _this3.$router.push(\"/\");\n        } else {\n          console.error(\"Error deleting post:\", response.statusText);\n        }\n      })[\"catch\"](function (error) {\n        console.error(\"Error deleting post:\", error);\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;AAcE,eAAe;EACbA,IAAI,kBAAG;IACL,OAAO;MACLC,IAAI,EAAE,CAAC;IACT,CAAC;EACH,CAAC;EACDC,OAAO,qBAAG;IACR;IACA,IAAMC,MAAK,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE;IACpC,IAAI,CAACC,SAAS,CAACJ,MAAM,CAAC;EACxB,CAAC;EACDK,OAAO,EAAE;IACPD,SAAS,qBAACJ,MAAM,EAAE;MAAA;MAChB;MACAM,KAAK,0CAAmCN,MAAM,EAAE,CAC7CO,IAAI,CAAC,UAACC,QAAQ;QAAA,OAAKA,QAAQ,CAACC,IAAI,EAAE;MAAA,GAClCF,IAAI,CAAC,UAACV,IAAI,EAAK;QACd,KAAI,CAACC,IAAG,GAAID,IAAI,EAAE;MACpB,CAAC,UACK,CAAC,UAACa,KAAK,EAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACzD,CAAC,CAAC;IACN,CAAC;IAEDE,UAAU,wBAAG;MAAA;MACX;MACA,IAAMC,WAAU,GAAIC,QAAQ,CAACC,aAAa,CAAC,qBAAqB,CAAC,CAACC,KAAK;;MAEvE;MACAV,KAAK,6CAAsC,IAAI,CAACR,IAAI,CAACK,EAAE,GAAI;QACzDc,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBF,IAAI,EAAEN;QACR,CAAC;MACH,CAAC,EACEN,IAAI,CAAC,UAACC,QAAQ;QAAA,OAAKA,QAAQ,CAACC,IAAI,EAAE;MAAA,GAClCF,IAAI,CAAC,UAACV,IAAI,EAAK;QACdc,OAAO,CAACW,GAAG,CAAC,eAAe,EAAEzB,IAAI,CAAC;;QAElC;QACA,MAAI,CAAC0B,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;MACxB,CAAC,UACK,CAAC,UAACd,KAAK,EAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C,CAAC,CAAC;IACN,CAAC;IAEDe,UAAU,wBAAG;MAAA;MACX,IAAMzB,MAAK,GAAI,IAAI,CAACF,IAAI,CAACK,EAAE;;MAE3B;MACAG,KAAK,6CAAsCN,MAAM,GAAI;QACnDiB,MAAM,EAAE,QAAQ;QAChBC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,EACEX,IAAI,CAAC,UAACC,QAAQ,EAAK;QAClB,IAAIA,QAAQ,CAACkB,EAAE,EAAE;UACff,OAAO,CAACW,GAAG,CAAC,2BAA2B,CAAC;UAExC,MAAI,CAACC,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;QACxB,OAAO;UACLb,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEF,QAAQ,CAACmB,UAAU,CAAC;QAC5D;MACF,CAAC,UACK,CAAC,UAACjB,KAAK,EAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C,CAAC,CAAC;IACN;EACF;AACF,CAAC","names":["data","post","mounted","postId","$route","params","id","fetchPost","methods","fetch","then","response","json","error","console","updatePost","updatedBody","document","querySelector","value","method","headers","body","JSON","stringify","log","$router","push","deletePost","ok","statusText"],"sourceRoot":"","sources":["C:\\Users\\karla\\Desktop\\kolmas\\TheLastOne\\FrontEnd\\src\\views\\IndividualPost.vue"],"sourcesContent":["<template>\r\n    <div class=\"individual-post\">\r\n      <h1>{{ \"Post \" + post.id }}</h1>\r\n      <div class=\"post-body\">\r\n        <textarea>{{ post.body }}</textarea>\r\n      </div>\r\n      <div class=\"post-actions\">\r\n        <button @click=\"updatePost\">Update</button>\r\n        <button @click=\"deletePost\">Delete</button>\r\n      </div>\r\n    </div>\r\n  </template>\r\n    \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        post: {},\r\n      };\r\n    },\r\n    mounted() {\r\n      // Fetch the data for the individual post using the route parameter\r\n      const postId = this.$route.params.id;\r\n      this.fetchPost(postId);\r\n    },\r\n    methods: {\r\n      fetchPost(postId) {\r\n        // Fetch the data for the individual post\r\n        fetch(`http://localhost:3000/post/get/${postId}`)\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            this.post = data; // Directly assign the response data\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error fetching individual post:\", error);\r\n          });\r\n      },\r\n  \r\n      updatePost() {\r\n        // Get the updated body directly from the textarea\r\n        const updatedBody = document.querySelector(\".post-body textarea\").value;\r\n  \r\n        // Send a request to update the post's body on the server\r\n        fetch(`http://localhost:3000/post/update/${this.post.id}`, {\r\n          method: \"PUT\", \r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            body: updatedBody,\r\n          }),\r\n        })\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            console.log(\"Post updated:\", data);\r\n  \r\n            // After updating, navigate back to the home page\r\n            this.$router.push(\"/\");\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error updating post:\", error);\r\n          });\r\n      },\r\n  \r\n      deletePost() {\r\n        const postId = this.post.id;\r\n  \r\n        // Send a request to delete the post on the server\r\n        fetch(`http://localhost:3000/post/delete/${postId}`, {\r\n          method: \"DELETE\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        })\r\n          .then((response) => {\r\n            if (response.ok) {\r\n              console.log(\"Post deleted successfully\");\r\n  \r\n              this.$router.push(\"/\");\r\n            } else {\r\n              console.error(\"Error deleting post:\", response.statusText);\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error deleting post:\", error);\r\n          });\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style>\r\n  .individual-post {\r\n    margin: 0 auto;\r\n    padding: 20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100vh;\r\n  }\r\n  \r\n  .post-body {\r\n    margin: 20px 0;\r\n    width: 60%;\r\n    height: 50%;\r\n  }\r\n  \r\n  .post-actions button {\r\n    padding: 12px 20px;\r\n    margin-right: 10px;\r\n    cursor: pointer;\r\n    background-color: deepskyblue;\r\n    border: none;\r\n    border-radius: 8px;\r\n    font-size: 16px;\r\n  }\r\n  \r\n  .post-actions {\r\n    display: flex;\r\n    gap: 20px;\r\n  }\r\n  \r\n  textarea {\r\n    width: 100%;\r\n    height: 100%;\r\n    padding: 10px;\r\n    box-sizing: border-box;\r\n    border: 1px solid #ccc;\r\n    border-radius: 8px;\r\n    font-size: 14px;\r\n    resize: vertical; /* Allow vertical resizing */\r\n  }\r\n  </style>\r\n    "]},"metadata":{},"sourceType":"module","externalDependencies":[]}